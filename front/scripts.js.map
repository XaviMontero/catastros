{"version":3,"sources":["src/assets/js/map.js","src/assets/js/compare.js"],"names":[],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,2EAA2E,KAAK;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;;;;;;;AAQL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;CCjPA,W;AACA,W;AACA;;AAEA,mB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,2EAA2E,OAAO;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;;;;;;;AAQL;;AAEA;;;;AAIA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,2EAA2E,MAAM;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;;;;;;;;AAQL;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scripts.js","sourcesContent":["var map;\n \nvar mag1 = ['<', ['get', 'mag'], 2];\nvar mag2 = ['all', ['>=', ['get', 'mag'], 2], ['<', ['get', 'mag'], 3]];\nvar mag3 = ['all', ['>=', ['get', 'mag'], 3], ['<', ['get', 'mag'], 4]];\nvar mag4 = ['all', ['>=', ['get', 'mag'], 4], ['<', ['get', 'mag'], 5]];\nvar mag5 = ['>=', ['get', 'mag'], 5];\n\n// colors to use for the categories\nvar colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];\nfunction myTest(data ){\n \n\n    mapboxgl.accessToken = 'pk.eyJ1IjoieGF2aW5vb2IiLCJhIjoiY2s0Mzh4bXZuMDN1NzNpcnJndXVzOXV2MiJ9.IQ7TZdyB6OnCy-8m7mqVhQ';\n    map = new mapboxgl.Map({\n        container: 'map',\n        zoom: 6,\n\n        center: [-79.8927486, -2.3170432],\n        style: 'mapbox://styles/mapbox/dark-v10'\n    });\n    map.addControl(new mapboxgl.NavigationControl());\n   \n\n    // filters for classifying earthquakes into five categories based on magnitude\n\n    map.on('load', function () {\n        // add a clustered GeoJSON source for a sample set of earthquakes\n        map.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                `https://covid-03-beta.herokuapp.com/Contagios/cordenada/${data}`,\n            'cluster': true,\n            'clusterRadius': 80,\n            'clusterProperties': {\n                // keep separate counts for each magnitude category in a cluster\n                'mag1': ['+', ['case', mag1, 1, 0]],\n                'mag2': ['+', ['case', mag2, 1, 0]],\n                'mag3': ['+', ['case', mag3, 1, 0]],\n                'mag4': ['+', ['case', mag4, 1, 0]],\n                'mag5': ['+', ['case', mag5, 1, 0]]\n            }\n        });\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\n        map.addLayer({\n            'id': 'earthquake_circle',\n            'type': 'circle',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'paint': {\n                'circle-color': [\n                    'case',\n                    mag1,\n                    colors[0],\n                    mag2,\n                    colors[1],\n                    mag3,\n                    colors[2],\n                    mag4,\n                    colors[3],\n                    colors[4]\n                ],\n                'circle-opacity': 0.6,\n                'circle-radius': 12\n            }\n        });\n        map.addLayer({\n            'id': 'earthquake_label',\n            'type': 'symbol',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'layout': {\n                'text-field': [\n                    'number-format',\n                    ['get', 'mag'],\n                    { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\n                ],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-size': 10\n            },\n            'paint': {\n                'text-color': [\n                    'case',\n                    ['<', ['get', 'mag'], 3],\n                    'black',\n                    'white'\n                ]\n            }\n        });\n\n        // objects for caching and keeping track of HTML marker objects (for performance)\n        var markers = {};\n        var markersOnScreen = {};\n\n        function updateMarkers() {\n            var newMarkers = {};\n            var features = map.querySourceFeatures('earthquakes');\n\n            // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\n            // and add it to the map if it's not there already\n            for (var i = 0; i < features.length; i++) {\n                var coords = features[i].geometry.coordinates;\n                var props = features[i].properties;\n                if (!props.cluster) continue;\n                var id = props.cluster_id;\n\n                var marker = markers[id];\n                if (!marker) {\n                    var el = createDonutChart(props);\n                    marker = markers[id] = new mapboxgl.Marker({\n                        element: el\n                    }).setLngLat(coords);\n                }\n                newMarkers[id] = marker;\n\n                if (!markersOnScreen[id]) marker.addTo(map);\n            }\n            // for every marker we've added previously, remove those that are no longer visible\n            for (id in markersOnScreen) {\n                if (!newMarkers[id]) markersOnScreen[id].remove();\n            }\n            markersOnScreen = newMarkers;\n        }\n\n        // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\n        map.on('data', function (e) {\n            if (e.sourceId !== 'earthquakes' || !e.isSourceLoaded) return;\n\n            map.on('move', updateMarkers);\n            map.on('moveend', updateMarkers);\n            updateMarkers();\n        });\n    });\n \n\n \n\n  \n \n\n}\nfunction createDonutChart(props) {\n    var offsets = [];\n    var counts = [\n        props.mag1,\n        props.mag2,\n        props.mag3,\n        props.mag4,\n        props.mag5\n    ];\n    var total = 0;\n    for (var i = 0; i < counts.length; i++) {\n        offsets.push(total);\n        total += counts[i];\n    }\n    var fontSize =\n        total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\n    var r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\n    var r0 = Math.round(r * 0.6);\n    var w = r * 2;\n\n    var html =\n        '<div><svg width=\"' +\n        w +\n        '\" height=\"' +\n        w +\n        '\" viewbox=\"0 0 ' +\n        w +\n        ' ' +\n        w +\n        '\" text-anchor=\"middle\" style=\"font: ' +\n        fontSize +\n        'px sans-serif\">';\n\n    for (i = 0; i < counts.length; i++) {\n        html += donutSegment(\n            offsets[i] / total,\n            (offsets[i] + counts[i]) / total,\n            r,\n            r0,\n            colors[i]\n        );\n    }\n    html +=\n        '<circle cx=\"' +\n        r +\n        '\" cy=\"' +\n        r +\n        '\" r=\"' +\n        r0 +\n        '\" fill=\"white\" /><text dominant-baseline=\"central\" transform=\"translate(' +\n        r +\n        ', ' +\n        r +\n        ')\">' +\n        total.toLocaleString() +\n        '</text></svg></div>';\n\n    var el = document.createElement('div');\n    el.innerHTML = html;\n    return el.firstChild;\n}\n\nfunction donutSegment(start, end, r, r0, color) {\n    if (end - start === 1) end -= 0.00001;\n    var a0 = 2 * Math.PI * (start - 0.25);\n    var a1 = 2 * Math.PI * (end - 0.25);\n    var x0 = Math.cos(a0),\n        y0 = Math.sin(a0);\n    var x1 = Math.cos(a1),\n        y1 = Math.sin(a1);\n    var largeArc = end - start > 0.5 ? 1 : 0;\n\n    return [\n        '<path d=\"M',\n        r + r0 * x0,\n        r + r0 * y0,\n        'L',\n        r + r * x0,\n        r + r * y0,\n        'A',\n        r,\n        r,\n        0,\n        largeArc,\n        1,\n        r + r * x1,\n        r + r * y1,\n        'L',\n        r + r0 * x1,\n        r + r0 * y1,\n        'A',\n        r0,\n        r0,\n        0,\n        largeArc,\n        0,\n        r + r0 * x0,\n        r + r0 * y0,\n        '\" fill=\"' + color + '\" />'\n    ].join(' ');\n}","var ahora ; \nvar antess; \nfunction carga(actual, antes) {\n\n    ahora = actual; \n    antess = antes;\n    mapboxgl.accessToken = 'pk.eyJ1IjoieGF2aW5vb2IiLCJhIjoiY2s0Mzh4bXZuMDN1NzNpcnJndXVzOXV2MiJ9.IQ7TZdyB6OnCy-8m7mqVhQ';\n    beforeMap = new mapboxgl.Map({\n        container: 'before',\n        style: 'mapbox://styles/mapbox/light-v10',\n\n        center: [-79.8927486, -2.3170432],\n        zoom: 6\n    });\n    sol();\n    afterMap = new mapboxgl.Map({\n        container: 'after',\n        style: 'mapbox://styles/mapbox/dark-v10',\n\n        center: [-79.8927486, -2.3170432],\n        zoom: 6\n    });\n\n    sol1();\n\n    // A selector or reference to HTML element\n    var container = '#comparison-container';\n\n    var map = new mapboxgl.Compare(beforeMap, afterMap, container, {\n        // Set this to enable comparing two maps by mouse movement:\n        // mousemove: true\n    });\n}\n\n\nvar afterMap\nvar beforeMap\nvar mag1 = ['<', ['get', 'mag'], 2];\nvar mag2 = ['all', ['>=', ['get', 'mag'], 2], ['<', ['get', 'mag'], 3]];\nvar mag3 = ['all', ['>=', ['get', 'mag'], 3], ['<', ['get', 'mag'], 4]];\nvar mag4 = ['all', ['>=', ['get', 'mag'], 4], ['<', ['get', 'mag'], 5]];\nvar mag5 = ['>=', ['get', 'mag'], 5];\n\n// colors to use for the categories\nvar colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];\nfunction sol() {\n\n\n\n    beforeMap.addControl(new mapboxgl.NavigationControl());\n\n\n    // filters for classifying earthquakes into five categories based on magnitude\n\n    beforeMap.on('load', function () {\n        // add a clustered GeoJSON source for a sample set of earthquakes\n        beforeMap.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                `https://covid-03-beta.herokuapp.com/Contagios/cordenada/${antess}`,\n            'cluster': true,\n            'clusterRadius': 80,\n            'clusterProperties': {\n                // keep separate counts for each magnitude category in a cluster\n                'mag1': ['+', ['case', mag1, 1, 0]],\n                'mag2': ['+', ['case', mag2, 1, 0]],\n                'mag3': ['+', ['case', mag3, 1, 0]],\n                'mag4': ['+', ['case', mag4, 1, 0]],\n                'mag5': ['+', ['case', mag5, 1, 0]]\n            }\n        });\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\n        beforeMap.addLayer({\n            'id': 'earthquake_circle',\n            'type': 'circle',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'paint': {\n                'circle-color': [\n                    'case',\n                    mag1,\n                    colors[0],\n                    mag2,\n                    colors[1],\n                    mag3,\n                    colors[2],\n                    mag4,\n                    colors[3],\n                    colors[4]\n                ],\n                'circle-opacity': 0.6,\n                'circle-radius': 12\n            }\n        });\n        beforeMap.addLayer({\n            'id': 'earthquake_label',\n            'type': 'symbol',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'layout': {\n                'text-field': [\n                    'number-format',\n                    ['get', 'mag'],\n                    { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\n                ],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-size': 10\n            },\n            'paint': {\n                'text-color': [\n                    'case',\n                    ['<', ['get', 'mag'], 3],\n                    'black',\n                    'white'\n                ]\n            }\n        });\n\n        // objects for caching and keeping track of HTML marker objects (for performance)\n        var markers = {};\n        var markersOnScreen = {};\n\n        function updateMarkers() {\n            var newMarkers = {};\n            var features = beforeMap.querySourceFeatures('earthquakes');\n\n            // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\n            // and add it to the map if it's not there already\n            for (var i = 0; i < features.length; i++) {\n                var coords = features[i].geometry.coordinates;\n                var props = features[i].properties;\n                if (!props.cluster) continue;\n                var id = props.cluster_id;\n\n                var marker = markers[id];\n                if (!marker) {\n                    var el = createDonutChart(props);\n                    marker = markers[id] = new mapboxgl.Marker({\n                        element: el\n                    }).setLngLat(coords);\n                }\n                newMarkers[id] = marker;\n\n                if (!markersOnScreen[id]) marker.addTo(beforeMap);\n            }\n            // for every marker we've added previously, remove those that are no longer visible\n            for (id in markersOnScreen) {\n                if (!newMarkers[id]) markersOnScreen[id].remove();\n            }\n            markersOnScreen = newMarkers;\n        }\n\n        // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\n        beforeMap.on('data', function (e) {\n            if (e.sourceId !== 'earthquakes' || !e.isSourceLoaded) return;\n\n            beforeMap.on('move', updateMarkers);\n            beforeMap.on('moveend', updateMarkers);\n            updateMarkers();\n        });\n    });\n\n\n\n\n\n\n\n}\n\nfunction sol1() {\n\n\n\n    afterMap.addControl(new mapboxgl.NavigationControl());\n\n\n    // filters for classifying earthquakes into five categories based on magnitude\n\n    afterMap.on('load', function () {\n        // add a clustered GeoJSON source for a sample set of earthquakes\n        afterMap.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                `https://covid-03-beta.herokuapp.com/Contagios/cordenada/${ahora}`,\n            'cluster': true,\n            'clusterRadius': 80,\n            'clusterProperties': {\n                // keep separate counts for each magnitude category in a cluster\n                'mag1': ['+', ['case', mag1, 1, 0]],\n                'mag2': ['+', ['case', mag2, 1, 0]],\n                'mag3': ['+', ['case', mag3, 1, 0]],\n                'mag4': ['+', ['case', mag4, 1, 0]],\n                'mag5': ['+', ['case', mag5, 1, 0]]\n            }\n        });\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\n        afterMap.addLayer({\n            'id': 'earthquake_circle',\n            'type': 'circle',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'paint': {\n                'circle-color': [\n                    'case',\n                    mag1,\n                    colors[0],\n                    mag2,\n                    colors[1],\n                    mag3,\n                    colors[2],\n                    mag4,\n                    colors[3],\n                    colors[4]\n                ],\n                'circle-opacity': 0.6,\n                'circle-radius': 12\n            }\n        });\n        afterMap.addLayer({\n            'id': 'earthquake_label',\n            'type': 'symbol',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'layout': {\n                'text-field': [\n                    'number-format',\n                    ['get', 'mag'],\n                    { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\n                ],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-size': 10\n            },\n            'paint': {\n                'text-color': [\n                    'case',\n                    ['<', ['get', 'mag'], 3],\n                    'black',\n                    'white'\n                ]\n            }\n        });\n\n        // objects for caching and keeping track of HTML marker objects (for performance)\n        var markers = {};\n        var markersOnScreen = {};\n\n        function updateMarkers() {\n            var newMarkers = {};\n            var features = afterMap.querySourceFeatures('earthquakes');\n\n            // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\n            // and add it to the map if it's not there already\n            for (var i = 0; i < features.length; i++) {\n                var coords = features[i].geometry.coordinates;\n                var props = features[i].properties;\n                if (!props.cluster) continue;\n                var id = props.cluster_id;\n\n                var marker = markers[id];\n                if (!marker) {\n                    var el = createDonutChart(props);\n                    marker = markers[id] = new mapboxgl.Marker({\n                        element: el\n                    }).setLngLat(coords);\n                }\n                newMarkers[id] = marker;\n\n                if (!markersOnScreen[id]) marker.addTo(afterMap);\n            }\n            // for every marker we've added previously, remove those that are no longer visible\n            for (id in markersOnScreen) {\n                if (!newMarkers[id]) markersOnScreen[id].remove();\n            }\n            markersOnScreen = newMarkers;\n        }\n\n        // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\n        afterMap.on('data', function (e) {\n            if (e.sourceId !== 'earthquakes' || !e.isSourceLoaded) return;\n\n            afterMap.on('move', updateMarkers);\n            afterMap.on('moveend', updateMarkers);\n            updateMarkers();\n        });\n    });\n\n\n\n\n\n\n\n}\n\n\n\n\nfunction createDonutChart(props) {\n    var offsets = [];\n    var counts = [\n        props.mag1,\n        props.mag2,\n        props.mag3,\n        props.mag4,\n        props.mag5\n    ];\n    var total = 0;\n    for (var i = 0; i < counts.length; i++) {\n        offsets.push(total);\n        total += counts[i];\n    }\n    var fontSize =\n        total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\n    var r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\n    var r0 = Math.round(r * 0.6);\n    var w = r * 2;\n\n    var html =\n        '<div><svg width=\"' +\n        w +\n        '\" height=\"' +\n        w +\n        '\" viewbox=\"0 0 ' +\n        w +\n        ' ' +\n        w +\n        '\" text-anchor=\"middle\" style=\"font: ' +\n        fontSize +\n        'px sans-serif\">';\n\n    for (i = 0; i < counts.length; i++) {\n        html += donutSegment(\n            offsets[i] / total,\n            (offsets[i] + counts[i]) / total,\n            r,\n            r0,\n            colors[i]\n        );\n    }\n    html +=\n        '<circle cx=\"' +\n        r +\n        '\" cy=\"' +\n        r +\n        '\" r=\"' +\n        r0 +\n        '\" fill=\"white\" /><text dominant-baseline=\"central\" transform=\"translate(' +\n        r +\n        ', ' +\n        r +\n        ')\">' +\n        total.toLocaleString() +\n        '</text></svg></div>';\n\n    var el = document.createElement('div');\n    el.innerHTML = html;\n    return el.firstChild;\n}\n\nfunction donutSegment(start, end, r, r0, color) {\n    if (end - start === 1) end -= 0.00001;\n    var a0 = 2 * Math.PI * (start - 0.25);\n    var a1 = 2 * Math.PI * (end - 0.25);\n    var x0 = Math.cos(a0),\n        y0 = Math.sin(a0);\n    var x1 = Math.cos(a1),\n        y1 = Math.sin(a1);\n    var largeArc = end - start > 0.5 ? 1 : 0;\n\n    return [\n        '<path d=\"M',\n        r + r0 * x0,\n        r + r0 * y0,\n        'L',\n        r + r * x0,\n        r + r * y0,\n        'A',\n        r,\n        r,\n        0,\n        largeArc,\n        1,\n        r + r * x1,\n        r + r * y1,\n        'L',\n        r + r0 * x1,\n        r + r0 * y1,\n        'A',\n        r0,\n        r0,\n        0,\n        largeArc,\n        0,\n        r + r0 * x0,\n        r + r0 * y0,\n        '\" fill=\"' + color + '\" />'\n    ].join(' ');\n}\n\n\n\n"],"sourceRoot":"webpack:///"}